let R, N, M, O, L, A = new h;
class E {
    constructor(e) {
        this.APOLLO_SERVICE_UUID = "0000fd1c-0000-1000-8000-00805f9b34fb", this.APOLLO_SERVICE_SESSION_ID_CHARACTERISTIC_UUID = "fc0018d8-cf12-46be-87b1-cce29b1e6c34", this.APOLLO_SERVICE_PRINT_JOB_CHARACTERISTIC_UUID = "7d9d9a4d-b530-4d13-8d61-e0ff445add19", this.APOLLO_SERVICE_PICL_REQUEST_CHARACTERISTIC_UUID = "a61ae408-3273-420c-a9db-0669f4f23b69", this.APOLLO_SERVICE_PICL_RESPONSE_CHARACTERISTIC_UUID = "786af345-1b68-c594-c643-e2867da117e3", this.APOLLO_SERVICE_PICL_RESPONSE_CONFIG_DESCRIPTOR_UUID = "00002902-0000-1000-8000-00805f9b34fb", R = e, this.isConnected = !1
    }
    promptForBleDeviceConnection(e) {
        return T(this, void 0, void 0, function*() {
            try {
                if (null != navigator.bluetooth && (yield navigator.bluetooth.getAvailability())) try {
                    if (M = yield navigator.bluetooth.requestDevice({
                            filters: [{
                                services: [this.APOLLO_SERVICE_UUID]
                            }]
                        }), this.device = M, console.log("Attempting connection to " + M.name + "..."), this.bluetoothGatt = yield M.gatt.connect(), console.log("Connected to gatt..."), console.log("Getting the primary service..."), this.service = yield this.bluetoothGatt.getPrimaryService(this.APOLLO_SERVICE_UUID), console.log("Getting the service characteristics..."), (M.name.includes(r.M211) || M.name.includes(r.M610)) && (this.sessionCharacteristic = yield this.service.getCharacteristic(this.APOLLO_SERVICE_SESSION_ID_CHARACTERISTIC_UUID)), this.printJobCharacteristic = yield this.service.getCharacteristic(this.APOLLO_SERVICE_PRINT_JOB_CHARACTERISTIC_UUID), this.piclRequestCharacteristic = yield this.service.getCharacteristic(this.APOLLO_SERVICE_PICL_REQUEST_CHARACTERISTIC_UUID), this.piclResponseCharacteristic = yield this.service.getCharacteristic(this.APOLLO_SERVICE_PICL_RESPONSE_CHARACTERISTIC_UUID), this.piclResponseCharacteristic.addEventListener("characteristicvaluechanged", B), yield this.piclResponseCharacteristic.startNotifications(), this.sessionUUID = "" == e || null == e ? g() : e, M.name.includes(r.M211) || M.name.includes(r.M610)) {
                        let e = (t = this.sessionUUID, n = [], t.split("-").map((e, t) => {
                            (t < 3 ? e.match(/.{1,2}/g).reverse() : e.match(/.{1,2}/g)).map(e => {
                                n.push(parseInt(e, 16))
                            })
                        }), n);
                        e.push(0);
                        const r = new Uint8Array(e);
                        yield this.sessionCharacteristic.writeValue(r)
                    }
                    return M.name.includes(r.M610) || M.name.includes(r.M710) ? (O = !0, this.isBmpProtocol = O) : M.name.includes(r.i7500) ? (L = !0, this.isPiclEnabled = !0) : (O = !1, this.isBmpProtocol = O), this.isConnected = !0, this.sessionUUID
                } catch (e) {
                    return console.log("Connection Failed!"), 9 == e.code && this.device.name.includes(r.M211) ? console.log("Hold the power button on this M211 for 5 seconds to release ownership.") : 9 == e.code && this.device.name.includes(r.M610) && console.log('"Forget" this device on your printer to release ownership and try connecting again'), this.isConnected = !1, ""
                }
            } catch (e) {
                return console.log("Connection Failed!"), console.log("This browser does not support the Web Bluetooth API."), this.isConnected = !1, ""
            }
            var t, n
        })
    }
    disconnect() {
        return T(this, void 0, void 0, function*() {
            if (null == this.device) return !1;
            if (localStorage.removeItem("ownershipID"), this.device.gatt.connected) {
                if (A = new h, this.device.name.includes(r.M211) || this.device.name.includes(r.M610)) {
                    const e = new Uint8Array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]);
                    this.sessionCharacteristic.writeValue(e)
                }
                return N = null, this.device.gatt.disconnect(), this.isConnected = !1, !0
            }
            return console.log("Bluetooth Device is already disconnected"), A.clearPiclResponses(), !1
        })
    }
    subscribeToTheDesiredPiclProperties() {
        return T(this, void 0, void 0, function*() {
            let e;
            e = this.device.name.includes(r.M211) ? '{"PropertySubscribeRequests":[{"ID": "' + A.PropertyKey.FatalError + '"},{"ID": "' + A.PropertyKey.CutError + '"},{"ID": "' + A.PropertyKey.MediaIsInvalid + '"},{"ID": "' + A.PropertyKey.SubstrateRemainingOut + '"},{"ID": "' + A.PropertyKey.LowPowerError + '"},{"ID": "' + A.PropertyKey.DismissibleError + '"},{"ID": "' + A.PropertyKey.SubstrateOutError + '"},{"ID": "' + A.PropertyKey.PrintJobError + '"},{"ID": "' + A.PropertyKey.PrintJobIdAndStatus + '"},{"ID": "' + A.PropertyKey.BatteryChargeStatus + '"},{"ID": "' + A.PropertyKey.BatteryACConnected + '"},{"ID": "' + A.PropertyKey.ShutdownTimeoutInMins + '"},{"ID": "' + A.PropertyKey.SubstratePrintableWidth + '"},{"ID": "' + A.PropertyKey.SubstrateLabelLinerLeftOffset + '"},{"ID": "' + A.PropertyKey.SubstratePrintableHeight + '"},{"ID": "' + A.PropertyKey.SubstrateVerticalOffset + '"},{"ID": "' + A.PropertyKey.SubstrateIsBlackStriped + '"},{"ID": "' + A.PropertyKey.SubstrateIsDieCut + '"},{"ID": "' + A.PropertyKey.SubstrateIsPermasleeve + '"},{"ID": "' + A.PropertyKey.SubstrateIsSelfLam + '" },{"ID": "' + A.PropertyKey.SubstrateRemainingPercent + '" },{"ID": "' + A.PropertyKey.SubstrateUniqueId + '" },{"ID": "' + A.PropertyKey.HeadOpenErrorIdentifier + '"},{"ID": "' + A.PropertyKey.SubstrateStallErrorIdentifier + '"},{"ID": "' + A.PropertyKey.LeadingEdgeErrorIdentifier + '"},{"ID": "' + A.PropertyKey.MediaYNumberIdentifier + '"},{"ID": "' + A.PropertyKey.JobPrintingComplete + '" },{"ID": "' + A.PropertyKey.FirmwareVersion + '" }]}' : '{"PropertySubscribeRequests":[{"ID": "' + A.PropertyKey.FatalError + '"},{"ID": "' + A.PropertyKey.CutError + '"},{"ID": "' + A.PropertyKey.MediaIsInvalid + '"},{"ID": "' + A.PropertyKey.SubstrateRemainingOut + '"},{"ID": "' + A.PropertyKey.LowPowerError + '"},{"ID": "' + A.PropertyKey.DismissibleError + '"},{"ID": "' + A.PropertyKey.SubstrateOutError + '"},{"ID": "' + A.PropertyKey.PrintJobError + '"},{"ID": "' + A.PropertyKey.PrintJobIdAndStatus + '"},{"ID": "' + A.PropertyKey.BatteryChargeStatus + '"},{"ID": "' + A.PropertyKey.BatteryACConnected + '"},{"ID": "' + A.PropertyKey.ShutdownTimeoutInMins + '"},{"ID": "' + A.PropertyKey.SubstratePrintableWidth + '"},{"ID": "' + A.PropertyKey.SubstrateLabelLinerLeftOffset + '"},{"ID": "' + A.PropertyKey.SubstratePrintableHeight + '"},{"ID": "' + A.PropertyKey.SubstrateVerticalOffset + '"},{"ID": "' + A.PropertyKey.SubstrateIsDieCut + '"},{"ID": "' + A.PropertyKey.SubstrateRemainingPercent + '" },{"ID": "' + A.PropertyKey.HeadOpenErrorIdentifier + '"},{"ID": "' + A.PropertyKey.SubstrateStallErrorIdentifier + '"},{"ID": "' + A.PropertyKey.LeadingEdgeErrorIdentifier + '"},{"ID": "' + A.PropertyKey.MediaYNumberIdentifier + '"},{"ID": "' + A.PropertyKey.JobPrintingComplete + '" },{"ID": "' + A.PropertyKey.FirmwareVersion + '" }]}';
            const t = d.buildJsonPiclPacketFromString(e);
            return this.sendDataToPrinter(this.piclRequestCharacteristic, t)
        })
    }
    feed() {
        return T(this, void 0, void 0, function*() {
            const e = '{"PropertySetRequests":[{"ID": "' + A.PropertyKey.FeedButtonIdentifier + '", "Value": "True"}]}',
                t = d.buildJsonPiclPacketFromString(e);
            return this.sendDataToPrinter(this.piclRequestCharacteristic, t)
        })
    }
    cut() {
        return T(this, void 0, void 0, function*() {
            const e = '{"PropertySetRequests":[{"ID": "' + A.PropertyKey.CutButtonIdentifier + '", "Value": "True"}]}',
                t = d.buildJsonPiclPacketFromString(e);
            return this.sendDataToPrinter(this.piclRequestCharacteristic, t)
        })
    }
    print(e, t) {
        return T(this, void 0, void 0, function*() {
            let n;
            if (n = yield this.sendDataToPrinter(this.printJobCharacteristic, e), !t) return n;
            {
                let e = 60;
                R.receivedPrinterUpdates = !1;
                for (let r = 0; r < e; r++) {
                    if (R.receivedPrinterUpdates && A.tryToGetValue(A.PropertyKey.PrintJobIdAndStatus)) {
                        const e = A.piclResponseDictionary.get(A.PropertyKey.PrintJobIdAndStatus).value.split(":"),
                            r = e[0],
                            a = e[1];
                        if (t === r) return "Successful" === a ? (n = !0, n) : (console.log("Print job failed!"), n = !1, n)
                    }
                    yield this.sleep(1e3)
                }
                console.log("Print job timed out!"), n = !1
            }
            return n
        })
    }
    sleep(e) {
        return T(this, void 0, void 0, function*() {
            return new Promise(t => setTimeout(t, e))
        })
    }
    sendDataToPrinter(e, t) {
        return T(this, void 0, void 0, function*() {
            let n = t.length,
                a = 0,
                i = 0,
                s = null,
                o = !1,
                u = 0,
                l = 0,
                d = 0;
            try {
                for (; i < n;) {
                    var f;
                    f = i + 148 > n ? n - i : 148, null != s && s.length == f + 3 || (s = new Uint8Array(f + 3));
                    const b = n == i + f;
                    var p;
                    p = this.device.name.includes(r.M211) ? i + f - u >= 4096 : a > 0 && (a + 1) % 16 == 0;
                    const h = new Uint8Array([b ? 3 : p ? 2 : 1, 255 & a, a >> 8 & 255]);
                    s.set(h), s.set(t.slice(i, i + f), 3), yield e.writeValue(s), b && (o = !0), i += f, a += 1, p && (u = i, l = a), d > 0 && --d
                }
            } catch (e) {
                console.log(e.stack), console.log("Failed to write to characteristic...")
            }
            return o
        })
    }
}
